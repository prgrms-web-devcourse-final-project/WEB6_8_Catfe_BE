commit 4d6c59aa1381261e4ee0e9bd634f6d1c5a1b5901
Author: joyewon0705 <77885098+joyewon0705@users.noreply.github.com>
Date:   Fri Oct 10 11:36:38 2025 +0900

    Feat: 작성자 응답 DTO 프로필 이미지 추가

diff --git a/src/main/java/com/back/domain/board/common/dto/AuthorResponse.java b/src/main/java/com/back/domain/board/common/dto/AuthorResponse.java
index 664d8fe..d177b02 100644
--- a/src/main/java/com/back/domain/board/common/dto/AuthorResponse.java
+++ b/src/main/java/com/back/domain/board/common/dto/AuthorResponse.java
@@ -6,12 +6,14 @@ import com.querydsl.core.annotations.QueryProjection;
 /**
  * 작성자 응답 DTO
  *
- * @param id       작성자 ID
- * @param nickname 작성자 닉네임
+ * @param id              작성자 ID
+ * @param nickname        작성자 닉네임
+ * @param profileImageUrl 작성자 프로필 이미지
  */
 public record AuthorResponse(
         Long id,
-        String nickname
+        String nickname,
+        String profileImageUrl
 ) {
     @QueryProjection
     public AuthorResponse {}
@@ -19,7 +21,8 @@ public record AuthorResponse(
     public static AuthorResponse from(User user) {
         return new AuthorResponse(
                 user.getId(),
-                user.getUserProfile().getNickname()
+                user.getUserProfile().getNickname(),
+                user.getProfileImageUrl()
         );
     }
 }
\ No newline at end of file
commit c9b6f84daaf1b583e98d68e0f806456b8196c3f3
Author: joyewon0705 <77885098+joyewon0705@users.noreply.github.com>
Date:   Fri Oct 10 12:31:33 2025 +0900

    Feat: 댓글 목록 조회 시 좋아요 여부 추가

diff --git a/src/main/java/com/back/domain/board/comment/controller/CommentController.java b/src/main/java/com/back/domain/board/comment/controller/CommentController.java
index aa873c8..a4091b2 100644
--- a/src/main/java/com/back/domain/board/comment/controller/CommentController.java
+++ b/src/main/java/com/back/domain/board/comment/controller/CommentController.java
@@ -44,9 +44,11 @@ public class CommentController implements CommentControllerDocs {
     @GetMapping
     public ResponseEntity<RsData<PageResponse<CommentListResponse>>> getComments(
             @PathVariable Long postId,
+            @AuthenticationPrincipal CustomUserDetails user,
             @PageableDefault(sort = "createdAt", direction = Sort.Direction.ASC) Pageable pageable
     ) {
-        PageResponse<CommentListResponse> response = commentService.getComments(postId, pageable);
+        Long userId = (user != null) ? user.getUserId() : null;
+        PageResponse<CommentListResponse> response = commentService.getComments(postId, userId, pageable);
         return ResponseEntity
                 .status(HttpStatus.OK)
                 .body(RsData.success(
diff --git a/src/main/java/com/back/domain/board/comment/controller/CommentControllerDocs.java b/src/main/java/com/back/domain/board/comment/controller/CommentControllerDocs.java
index 4f50bbf..d62b472 100644
--- a/src/main/java/com/back/domain/board/comment/controller/CommentControllerDocs.java
+++ b/src/main/java/com/back/domain/board/comment/controller/CommentControllerDocs.java
@@ -41,7 +41,8 @@ public interface CommentControllerDocs {
                                         "postId": 101,
                                         "author": {
                                           "id": 5,
-                                          "nickname": "홍길동"
+                                          "nickname": "홍길동",
+                                          "profileImageUrl": null
                                         },
                                         "content": "좋은 글 감사합니다!",
                                         "createdAt": "2025-09-22T11:30:00",
@@ -170,10 +171,12 @@ public interface CommentControllerDocs {
                                             "parentId": null,
                                             "author": {
                                               "id": 5,
-                                              "nickname": "홍길동"
+                                              "nickname": "홍길동",
+                                              "profileImageUrl": null
                                             },
                                             "content": "부모 댓글",
                                             "likeCount": 2,
+                                            "likedByMe": true,
                                             "createdAt": "2025-09-22T11:30:00",
                                             "updatedAt": "2025-09-22T11:30:00",
                                             "children": [
@@ -183,10 +186,12 @@ public interface CommentControllerDocs {
                                                 "parentId": 1,
                                                 "author": {
                                                   "id": 5,
-                                                  "nickname": "홍길동"
+                                                  "nickname": "홍길동",
+                                                  "profileImageUrl": null
                                                 },
                                                 "content": "자식 댓글",
                                                 "likeCount": 0,
+                                                "likedByMe": false,
                                                 "createdAt": "2025-09-22T11:35:00",
                                                 "updatedAt": "2025-09-22T11:35:00",
                                                 "children": []
@@ -252,6 +257,7 @@ public interface CommentControllerDocs {
     })
     ResponseEntity<RsData<PageResponse<CommentListResponse>>> getComments(
             @PathVariable Long postId,
+            @AuthenticationPrincipal CustomUserDetails user,
             Pageable pageable
     );
 
@@ -275,7 +281,8 @@ public interface CommentControllerDocs {
                                         "postId": 101,
                                         "author": {
                                           "id": 5,
-                                          "nickname": "홍길동"
+                                          "nickname": "홍길동",
+                                          "profileImageUrl": null
                                         },
                                         "content": "수정된 댓글 내용입니다.",
                                         "createdAt": "2025-09-22T11:30:00",
diff --git a/src/main/java/com/back/domain/board/comment/dto/CommentListResponse.java b/src/main/java/com/back/domain/board/comment/dto/CommentListResponse.java
index 90f6055..7c4a2c8 100644
--- a/src/main/java/com/back/domain/board/comment/dto/CommentListResponse.java
+++ b/src/main/java/com/back/domain/board/comment/dto/CommentListResponse.java
@@ -22,6 +22,9 @@ public class CommentListResponse {
     @Setter
     private long likeCount;
 
+    @Setter
+    private Boolean likedByMe;
+
     private final LocalDateTime createdAt;
     private final LocalDateTime updatedAt;
 
@@ -35,6 +38,7 @@ public class CommentListResponse {
                                AuthorResponse author,
                                String content,
                                long likeCount,
+                               Boolean likedByMe,
                                LocalDateTime createdAt,
                                LocalDateTime updatedAt,
                                List<CommentListResponse> children) {
@@ -43,6 +47,7 @@ public class CommentListResponse {
         this.parentId = parentId;
         this.author = author;
         this.content = content;
+        this.likedByMe = likedByMe;
         this.likeCount = likeCount;
         this.createdAt = createdAt;
         this.updatedAt = updatedAt;
diff --git a/src/main/java/com/back/domain/board/comment/repository/CommentLikeRepository.java b/src/main/java/com/back/domain/board/comment/repository/CommentLikeRepository.java
index 47a3a99..df675a4 100644
--- a/src/main/java/com/back/domain/board/comment/repository/CommentLikeRepository.java
+++ b/src/main/java/com/back/domain/board/comment/repository/CommentLikeRepository.java
@@ -2,12 +2,16 @@ package com.back.domain.board.comment.repository;
 
 import com.back.domain.board.comment.entity.CommentLike;
 import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+import org.springframework.data.repository.query.Param;
 import org.springframework.stereotype.Repository;
 
+import java.util.Collection;
+import java.util.List;
 import java.util.Optional;
 
 @Repository
-public interface CommentLikeRepository extends JpaRepository<CommentLike, Long> {
+public interface CommentLikeRepository extends JpaRepository<CommentLike, Long>, CommentLikeRepositoryCustom {
     boolean existsByUserIdAndCommentId(Long userId, Long commentId);
     Optional<CommentLike> findByUserIdAndCommentId(Long userId, Long commentId);
 }
diff --git a/src/main/java/com/back/domain/board/comment/repository/CommentLikeRepositoryCustom.java b/src/main/java/com/back/domain/board/comment/repository/CommentLikeRepositoryCustom.java
new file mode 100644
index 0000000..a2ec7cb
--- /dev/null
+++ b/src/main/java/com/back/domain/board/comment/repository/CommentLikeRepositoryCustom.java
@@ -0,0 +1,8 @@
+package com.back.domain.board.comment.repository;
+
+import java.util.Collection;
+import java.util.List;
+
+public interface CommentLikeRepositoryCustom {
+    List<Long> findLikedCommentIdsIn(Long userId, Collection<Long> commentIds);
+}
diff --git a/src/main/java/com/back/domain/board/comment/repository/CommentLikeRepositoryImpl.java b/src/main/java/com/back/domain/board/comment/repository/CommentLikeRepositoryImpl.java
new file mode 100644
index 0000000..9e52055
--- /dev/null
+++ b/src/main/java/com/back/domain/board/comment/repository/CommentLikeRepositoryImpl.java
@@ -0,0 +1,31 @@
+package com.back.domain.board.comment.repository;
+
+import com.back.domain.board.comment.entity.QCommentLike;
+import com.querydsl.jpa.impl.JPAQueryFactory;
+import lombok.RequiredArgsConstructor;
+import org.springframework.stereotype.Repository;
+
+import java.util.Collection;
+import java.util.List;
+
+
+@Repository
+@RequiredArgsConstructor
+public class CommentLikeRepositoryImpl implements CommentLikeRepositoryCustom {
+
+    private final JPAQueryFactory queryFactory;
+
+    @Override
+    public List<Long> findLikedCommentIdsIn(Long userId, Collection<Long> commentIds) {
+        QCommentLike commentLike = QCommentLike.commentLike;
+
+        return queryFactory
+                .select(commentLike.comment.id)
+                .from(commentLike)
+                .where(
+                        commentLike.user.id.eq(userId),
+                        commentLike.comment.id.in(commentIds)
+                )
+                .fetch();
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/com/back/domain/board/comment/repository/CommentRepositoryImpl.java b/src/main/java/com/back/domain/board/comment/repository/CommentRepositoryImpl.java
index 11ae4c5..29156bf 100644
--- a/src/main/java/com/back/domain/board/comment/repository/CommentRepositoryImpl.java
+++ b/src/main/java/com/back/domain/board/comment/repository/CommentRepositoryImpl.java
@@ -112,9 +112,10 @@ public class CommentRepositoryImpl implements CommentRepositoryCustom {
                         comment.id,
                         comment.post.id,
                         comment.parent.id,
-                        new QAuthorResponse(user.id, profile.nickname),
+                        new QAuthorResponse(user.id, profile.nickname, profile.profileImageUrl),
                         comment.content,
                         Expressions.constant(0L), // likeCount는 별도 주입
+                        Expressions.constant(false),
                         comment.createdAt,
                         comment.updatedAt,
                         Expressions.constant(Collections.emptyList()) // children은 별도 주입
diff --git a/src/main/java/com/back/domain/board/comment/service/CommentService.java b/src/main/java/com/back/domain/board/comment/service/CommentService.java
index 64b7ab4..98e768f 100644
--- a/src/main/java/com/back/domain/board/comment/service/CommentService.java
+++ b/src/main/java/com/back/domain/board/comment/service/CommentService.java
@@ -4,6 +4,8 @@ import com.back.domain.board.comment.dto.CommentListResponse;
 import com.back.domain.board.comment.dto.CommentRequest;
 import com.back.domain.board.comment.dto.CommentResponse;
 import com.back.domain.board.comment.dto.ReplyResponse;
+import com.back.domain.board.comment.entity.CommentLike;
+import com.back.domain.board.comment.repository.CommentLikeRepository;
 import com.back.domain.board.common.dto.PageResponse;
 import com.back.domain.board.comment.entity.Comment;
 import com.back.domain.board.post.entity.Post;
@@ -22,11 +24,16 @@ import org.springframework.data.domain.Pageable;
 import org.springframework.stereotype.Service;
 import org.springframework.transaction.annotation.Transactional;
 
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
 @Service
 @RequiredArgsConstructor
 @Transactional
 public class CommentService {
     private final CommentRepository commentRepository;
+    private final CommentLikeRepository commentLikeRepository;
     private final UserRepository userRepository;
     private final PostRepository postRepository;
     private final ApplicationEventPublisher eventPublisher;
@@ -85,6 +92,41 @@ public class CommentService {
         return PageResponse.from(comments);
     }
 
+    // TODO: 추후 메서드 통합 및 리팩토링
+    @Transactional(readOnly = true)
+    public PageResponse<CommentListResponse> getComments(Long postId, Long userId, Pageable pageable) {
+        // 기본 댓글 목록
+        PageResponse<CommentListResponse> response = getComments(postId, pageable);
+
+        // 로그인 사용자용 로직
+        if (userId != null) {
+            // 댓글 ID 수집
+            List<Long> commentIds = response.items().stream()
+                    .map(CommentListResponse::getCommentId)
+                    .toList();
+
+            if (commentIds.isEmpty()) return response;
+
+            // QueryDSL 기반 좋아요 ID 조회 (단일 쿼리)
+            List<Long> likedIds = commentLikeRepository.findLikedCommentIdsIn(userId, commentIds);
+            Set<Long> likedSet = new HashSet<>(likedIds);
+
+            // likedByMe 세팅
+            response.items().forEach(c -> c.setLikedByMe(likedSet.contains(c.getCommentId())));
+
+            // 자식 댓글에도 동일 적용
+            response.items().forEach(parent -> {
+                if (parent.getChildren() != null) {
+                    parent.getChildren().forEach(child ->
+                            child.setLikedByMe(likedSet.contains(child.getCommentId()))
+                    );
+                }
+            });
+        }
+
+        return response;
+    }
+
     /**
      * 댓글 수정 서비스
      * 1. Post 조회
diff --git a/src/main/java/com/back/domain/board/post/repository/PostRepositoryImpl.java b/src/main/java/com/back/domain/board/post/repository/PostRepositoryImpl.java
index b43d199..97c4ca1 100644
--- a/src/main/java/com/back/domain/board/post/repository/PostRepositoryImpl.java
+++ b/src/main/java/com/back/domain/board/post/repository/PostRepositoryImpl.java
@@ -160,7 +160,7 @@ public class PostRepositoryImpl implements PostRepositoryCustom {
         return queryFactory
                 .select(new QPostListResponse(
                         post.id,
-                        new QAuthorResponse(user.id, profile.nickname), // 작성자 정보 (N+1 방지 join)
+                        new QAuthorResponse(user.id, profile.nickname, profile.profileImageUrl), // 작성자 정보 (N+1 방지 join)
                         post.title,
                         Expressions.constant(Collections.emptyList()), // categories는 별도 주입
                         likeCount,
commit 231d9348c41b7a3fbe5dbc68493bb4011a620810
Author: joyewon0705 <77885098+joyewon0705@users.noreply.github.com>
Date:   Fri Oct 10 12:45:42 2025 +0900

    Feat: 게시글 단건 조회 시 좋아요/북마크 여부 추가

diff --git a/src/main/java/com/back/domain/board/comment/controller/CommentControllerDocs.java b/src/main/java/com/back/domain/board/comment/controller/CommentControllerDocs.java
index d62b472..7ff99a6 100644
--- a/src/main/java/com/back/domain/board/comment/controller/CommentControllerDocs.java
+++ b/src/main/java/com/back/domain/board/comment/controller/CommentControllerDocs.java
@@ -539,7 +539,8 @@ public interface CommentControllerDocs {
                                         "parentId": 25,
                                         "author": {
                                           "id": 7,
-                                          "nickname": "이몽룡"
+                                          "nickname": "이몽룡",
+                                          "profileImageUrl": null
                                         },
                                         "content": "저도 동의합니다!",
                                         "createdAt": "2025-09-22T13:30:00",
diff --git a/src/main/java/com/back/domain/board/post/controller/PostController.java b/src/main/java/com/back/domain/board/post/controller/PostController.java
index bf0ffa5..f0a1c67 100644
--- a/src/main/java/com/back/domain/board/post/controller/PostController.java
+++ b/src/main/java/com/back/domain/board/post/controller/PostController.java
@@ -59,9 +59,12 @@ public class PostController implements PostControllerDocs {
     // 게시글 단건 조회
     @GetMapping("/{postId}")
     public ResponseEntity<RsData<PostDetailResponse>> getPost(
-            @PathVariable Long postId
+            @PathVariable Long postId,
+            @AuthenticationPrincipal CustomUserDetails user
     ) {
-        PostDetailResponse response = postService.getPost(postId);
+        PostDetailResponse response = (user != null)
+                ? postService.getPostWithUser(postId, user.getUserId())
+                : postService.getPost(postId);
         return ResponseEntity
                 .status(HttpStatus.OK)
                 .body(RsData.success(
diff --git a/src/main/java/com/back/domain/board/post/controller/PostControllerDocs.java b/src/main/java/com/back/domain/board/post/controller/PostControllerDocs.java
index c3bc9a4..7d04c57 100644
--- a/src/main/java/com/back/domain/board/post/controller/PostControllerDocs.java
+++ b/src/main/java/com/back/domain/board/post/controller/PostControllerDocs.java
@@ -43,7 +43,8 @@ public interface PostControllerDocs {
                                         "postId": 101,
                                         "author": {
                                           "id": 5,
-                                          "nickname": "홍길동"
+                                          "nickname": "홍길동",
+                                          "profileImageUrl": null
                                         },
                                         "title": "첫 번째 게시글",
                                         "content": "안녕하세요, 첫 글입니다!",
@@ -171,7 +172,7 @@ public interface PostControllerDocs {
                                         "items": [
                                           {
                                             "postId": 1,
-                                            "author": { "id": 10, "nickname": "홍길동" },
+                                            "author": { "id": 10, "nickname": "홍길동", "profileImageUrl": null },
                                             "title": "첫 글",
                                             "categories": [{ "id": 1, "name": "공지사항" }],
                                             "likeCount": 5,
@@ -247,7 +248,7 @@ public interface PostControllerDocs {
                                       "message": "게시글이 조회되었습니다.",
                                       "data": {
                                         "postId": 101,
-                                        "author": { "id": 5, "nickname": "홍길동" },
+                                        "author": { "id": 5, "nickname": "홍길동", "profileImageUrl": null },
                                         "title": "첫 번째 게시글",
                                         "content": "안녕하세요, 첫 글입니다!",
                                         "categories": [
@@ -257,6 +258,8 @@ public interface PostControllerDocs {
                                         "likeCount": 10,
                                         "bookmarkCount": 2,
                                         "commentCount": 3,
+                                        "likedByMe": false,
+                                        "bookmarkedByMe": false,
                                         "createdAt": "2025-09-22T10:30:00",
                                         "updatedAt": "2025-09-22T10:30:00"
                                       }
@@ -296,7 +299,8 @@ public interface PostControllerDocs {
             )
     })
     ResponseEntity<RsData<PostDetailResponse>> getPost(
-            @PathVariable Long postId
+            @PathVariable Long postId,
+            @AuthenticationPrincipal CustomUserDetails user
     );
 
     @Operation(
@@ -318,7 +322,8 @@ public interface PostControllerDocs {
                                         "postId": 101,
                                         "author": {
                                           "id": 5,
-                                          "nickname": "홍길동"
+                                          "nickname": "홍길동",
+                                          "profileImageUrl": null
                                         },
                                         "title": "수정된 게시글",
                                         "content": "안녕하세요, 수정했습니다!",
diff --git a/src/main/java/com/back/domain/board/post/dto/PostDetailResponse.java b/src/main/java/com/back/domain/board/post/dto/PostDetailResponse.java
index e14b124..d61fe9a 100644
--- a/src/main/java/com/back/domain/board/post/dto/PostDetailResponse.java
+++ b/src/main/java/com/back/domain/board/post/dto/PostDetailResponse.java
@@ -29,10 +29,16 @@ public record PostDetailResponse(
         long likeCount,
         long bookmarkCount,
         long commentCount,
+        Boolean likedByMe,
+        Boolean bookmarkedByMe,
         LocalDateTime createdAt,
         LocalDateTime updatedAt
 ) {
     public static PostDetailResponse from(Post post) {
+        return from(post, false, false);
+    }
+
+    public static PostDetailResponse from(Post post, boolean likedByMe, boolean bookmarkedByMe) {
         return new PostDetailResponse(
                 post.getId(),
                 AuthorResponse.from(post.getUser()),
@@ -44,6 +50,8 @@ public record PostDetailResponse(
                 post.getPostLikes().size(),
                 post.getPostBookmarks().size(),
                 post.getComments().size(),
+                likedByMe,
+                bookmarkedByMe,
                 post.getCreatedAt(),
                 post.getUpdatedAt()
         );
diff --git a/src/main/java/com/back/domain/board/post/service/PostService.java b/src/main/java/com/back/domain/board/post/service/PostService.java
index 995e37f..17086a0 100644
--- a/src/main/java/com/back/domain/board/post/service/PostService.java
+++ b/src/main/java/com/back/domain/board/post/service/PostService.java
@@ -7,7 +7,9 @@ import com.back.domain.board.post.dto.PostDetailResponse;
 import com.back.domain.board.post.dto.PostListResponse;
 import com.back.domain.board.post.dto.PostRequest;
 import com.back.domain.board.post.dto.PostResponse;
+import com.back.domain.board.post.repository.PostBookmarkRepository;
 import com.back.domain.board.post.repository.PostCategoryRepository;
+import com.back.domain.board.post.repository.PostLikeRepository;
 import com.back.domain.board.post.repository.PostRepository;
 import com.back.domain.user.entity.User;
 import com.back.domain.user.repository.UserRepository;
@@ -26,6 +28,8 @@ import java.util.List;
 @Transactional
 public class PostService {
     private final PostRepository postRepository;
+    private final PostLikeRepository postLikeRepository;
+    private final PostBookmarkRepository postBookmarkRepository;
     private final UserRepository userRepository;
     private final PostCategoryRepository postCategoryRepository;
 
@@ -85,6 +89,18 @@ public class PostService {
         return PostDetailResponse.from(post);
     }
 
+    // TODO: 로그인 회원용 게시글 단건 조회 서비스, 추후 리팩토링 필요
+    @Transactional(readOnly = true)
+    public PostDetailResponse getPostWithUser(Long postId, Long userId) {
+        Post post = postRepository.findById(postId)
+                .orElseThrow(() -> new CustomException(ErrorCode.POST_NOT_FOUND));
+
+        boolean likedByMe = postLikeRepository.existsByUserIdAndPostId(userId, postId);
+        boolean bookmarkedByMe = postBookmarkRepository.existsByUserIdAndPostId(userId, postId);
+
+        return PostDetailResponse.from(post, likedByMe, bookmarkedByMe);
+    }
+
     /**
      * 게시글 수정 서비스
      * 1. Post 조회
commit e2659bb21019551e17490a6873ed7b184721f4a8
Author: joyewon0705 <77885098+joyewon0705@users.noreply.github.com>
Date:   Fri Oct 10 14:54:23 2025 +0900

    Feat: Post thumbnailUrl 필드 추가

diff --git a/src/main/java/com/back/domain/board/post/dto/PostListResponse.java b/src/main/java/com/back/domain/board/post/dto/PostListResponse.java
index 9545bcc..20a5779 100644
--- a/src/main/java/com/back/domain/board/post/dto/PostListResponse.java
+++ b/src/main/java/com/back/domain/board/post/dto/PostListResponse.java
@@ -16,19 +16,22 @@ public class PostListResponse {
     private final Long postId;
     private final AuthorResponse author;
     private final String title;
+    private final String thumbnailUrl;
+
+    @Setter
+    private List<CategoryResponse> categories;
+
     private final long likeCount;
     private final long bookmarkCount;
     private final long commentCount;
     private final LocalDateTime createdAt;
     private final LocalDateTime updatedAt;
 
-    @Setter
-    private List<CategoryResponse> categories;
-
     @QueryProjection
     public PostListResponse(Long postId,
                             AuthorResponse author,
                             String title,
+                            String thumbnailUrl,
                             List<CategoryResponse> categories,
                             long likeCount,
                             long bookmarkCount,
@@ -38,6 +41,7 @@ public class PostListResponse {
         this.postId = postId;
         this.author = author;
         this.title = title;
+        this.thumbnailUrl = thumbnailUrl;
         this.categories = categories;
         this.likeCount = likeCount;
         this.bookmarkCount = bookmarkCount;
diff --git a/src/main/java/com/back/domain/board/post/dto/PostRequest.java b/src/main/java/com/back/domain/board/post/dto/PostRequest.java
index 5deef45..12e24a9 100644
--- a/src/main/java/com/back/domain/board/post/dto/PostRequest.java
+++ b/src/main/java/com/back/domain/board/post/dto/PostRequest.java
@@ -9,10 +9,12 @@ import java.util.List;
  *
  * @param title         게시글 제목
  * @param content       게시글 내용
+ * @param thumbnailUrl  썸네일 URL
  * @param categoryIds   카테고리 ID 리스트
  */
 public record PostRequest(
         @NotBlank String title,
         @NotBlank String content,
+        String thumbnailUrl,
         List<Long> categoryIds
 ) {}
\ No newline at end of file
diff --git a/src/main/java/com/back/domain/board/post/entity/Post.java b/src/main/java/com/back/domain/board/post/entity/Post.java
index e34945e..743101a 100644
--- a/src/main/java/com/back/domain/board/post/entity/Post.java
+++ b/src/main/java/com/back/domain/board/post/entity/Post.java
@@ -9,6 +9,8 @@ import lombok.NoArgsConstructor;
 
 import java.util.ArrayList;
 import java.util.List;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
 
 @Entity
 @Getter
@@ -22,6 +24,9 @@ public class Post extends BaseEntity {
 
     private String content;
 
+    @Column(length = 500)
+    private String thumbnailUrl;
+
     // TODO: 추후 PostRepositoryImpl#searchPosts 로직 개선 필요, ERD에도 반영할 것
     @Column(nullable = false)
     private Long likeCount = 0L;
@@ -49,6 +54,14 @@ public class Post extends BaseEntity {
         this.user = user;
         this.title = title;
         this.content = content;
+        this.thumbnailUrl = null;
+    }
+
+    public Post(User user, String title, String content, String thumbnailUrl) {
+        this.user = user;
+        this.title = title;
+        this.content = content;
+        this.thumbnailUrl = thumbnailUrl;
     }
 
     // -------------------- 비즈니스 메서드 --------------------
diff --git a/src/main/java/com/back/domain/board/post/repository/PostRepositoryImpl.java b/src/main/java/com/back/domain/board/post/repository/PostRepositoryImpl.java
index 97c4ca1..53806ff 100644
--- a/src/main/java/com/back/domain/board/post/repository/PostRepositoryImpl.java
+++ b/src/main/java/com/back/domain/board/post/repository/PostRepositoryImpl.java
@@ -162,6 +162,7 @@ public class PostRepositoryImpl implements PostRepositoryCustom {
                         post.id,
                         new QAuthorResponse(user.id, profile.nickname, profile.profileImageUrl), // 작성자 정보 (N+1 방지 join)
                         post.title,
+                        post.thumbnailUrl,
                         Expressions.constant(Collections.emptyList()), // categories는 별도 주입
                         likeCount,
                         bookmarkCount,
diff --git a/src/main/java/com/back/domain/board/post/service/PostService.java b/src/main/java/com/back/domain/board/post/service/PostService.java
index 17086a0..b53a88d 100644
--- a/src/main/java/com/back/domain/board/post/service/PostService.java
+++ b/src/main/java/com/back/domain/board/post/service/PostService.java
@@ -47,7 +47,7 @@ public class PostService {
                 .orElseThrow(() -> new CustomException(ErrorCode.USER_NOT_FOUND));
 
         // Post 생성
-        Post post = new Post(user, request.title(), request.content());
+        Post post = new Post(user, request.title(), request.content(), request.thumbnailUrl());
 
         // Category 매핑
         if (request.categoryIds() != null) {
