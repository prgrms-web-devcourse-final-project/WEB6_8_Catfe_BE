spring:
  config:
    import: optional:file:.env[.properties]

  datasource:
    url: jdbc:mysql://${MYSQL_HOST}:${MYSQL_PORT}/${MYSQL_DATABASE}?serverTimezone=Asia/Seoul&characterEncoding=UTF-8
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: ${MYSQL_USERNAME}
    password: ${MYSQL_PASSWORD}

  data:
    redis:
      host: ${REDIS_HOST}
      port: 6379
      password: ${REDIS_PASSWORD}

  jpa:
    database-platform: org.hibernate.dialect.MySQLDialect
    hibernate:
      ddl-auto: update  # [none | validate | update | create | create-drop]

  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            authorization-grant-type: authorization_code
            client-name: Kakao
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope: profile_nickname, profile_image, account_email
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            client-name: Naver
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope: email, nickname, profile_image
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            client-name: Google
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope:
              - email
              - profile
          github:
            client-id: ${GITHUB_CLIENT_ID}
            client-secret: ${GITHUB_CLIENT_SECRET}
            client-name: GitHub
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope: user:email
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/v2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
            user-name-attribute: sub
          github:
            authorization-uri: https://github.com/login/oauth/authorize
            token-uri: https://github.com/login/oauth/access_token
            user-info-uri: https://api.github.com/user
            user-name-attribute: id
  servlet:
    multipart:
      max-file-size: 10MB # 업로드할 수 있는 개별 파일의 최대 크기
      max-request-size: 10MB # 한 요청의 최대 허용 크기

  mail:
    host: ${EMAIL_HOST}  # Gmail SMTP 서버 (운영 환경에서는 AWS SES 등으로 변경 권장)
    port: ${EMAIL_PORT}
    username: ${EMAIL_USERNAME}  # 이메일 주소
    password: ${EMAIL_PASSWORD}  # 이메일 비밀번호 또는 앱 비밀번호
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

  lifecycle:
    timeout-per-shutdown-phase: 30s # 종료 대기 시간

server:
  shutdown: graceful # graceful shutdown 활성화

springdoc:
  default-produces-media-type: application/json;charset=UTF-8

logging:
  level:
    org.hibernate.orm.jdbc.bind: OFF
    org.springframework.web.socket: INFO
    org.springframework.messaging: INFO

jwt:
  secret: ${JWT_SECRET} # 운영 시에는 반드시 환경 변수로 설정할 것
  access-token-expiration: ${JWT_ACCESS_TOKEN_EXPIRATION:1800}  # 30분 (초 단위)
  refresh-token-expiration: ${JWT_REFRESH_TOKEN_EXPIRATION:604800}  # 7일 (초 단위)

webrtc:
  ice-servers:
    - urls: stun:stun.l.google.com:19302
    - urls: stun:stun1.l.google.com:19302
    - urls: stun:stun2.l.google.com:19302
  turn:
    shared-secret: "${WEBRTC_TURN_SHARED_SECRET}"
    server-ip: "${WEBRTC_TURN_SERVER_IP}"
    ttl-seconds: 3600

# 스터디룸 설정
studyroom:
  heartbeat:
    timeout-minutes: 5  # Heartbeat 타임아웃 (분)
  default:
    max-participants: 10  # 기본 최대 참가자 수
    allow-camera: true
    allow-audio: true
    allow-screen-share: true

frontend:
  base-url: ${FRONTEND_BASE_URL}

# AWS S3
cloud:
  aws:
    credentials:
      access-key: ${ACCESS_KEY}
      secret-key: ${SECRET_KEY}

    region:
      static: ${REGION}

    s3:
      bucket: ${BUCKET_NAME}

    stack:
      auto: false