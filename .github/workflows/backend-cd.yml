name: backend-cd
on:
  push:
    paths:
      - '.github/workflows/**'
      - 'src/**'
      - 'build.gradle.kts'
      - 'settings.gradle.kts'
      - 'Dockerfile'
    branches:
      - main # main Î∏åÎûúÏπòÎ°ú Î®∏ÏßÄÎêòÎ©¥ Ïã§Ìñâ

jobs:
  makeTagAndRelease:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.create_tag.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v4
      - name: Create Tag
        id: create_tag
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create_tag.outputs.new_tag }}
          release_name: Release ${{ steps.create_tag.outputs.new_tag }}
          body: ${{ steps.create_tag.outputs.changelog }}
          draft: false
          prerelease: false

  buildImageAndPush:
    name: ÎèÑÏª§ Ïù¥ÎØ∏ÏßÄ ÎπåÎìúÏôÄ Ìë∏Ïãú
    needs: makeTagAndRelease
    runs-on: ubuntu-latest
    env:
      DOCKER_IMAGE_NAME: catfe-backend
      DOT_ENV: ${{ secrets.DOT_ENV_PROD }}
      OWNER: ${{ github.repository_owner }}
    steps:
      - uses: actions/checkout@v4
      - name: .env ÏÉùÏÑ±
        run: echo "$DOT_ENV_PROD" > .env

      - name: Docker Buildx ÏÑ§Ïπò
        uses: docker/setup-buildx-action@v2

      - name: Î†àÏßÄÏä§Ìä∏Î¶¨ Î°úÍ∑∏Ïù∏
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: set lower case owner name
        run: |
          echo "OWNER_LC=${OWNER,,}" >> ${GITHUB_ENV}


      - name: ÎπåÎìú Ïï§ Ìë∏Ïãú
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ env.OWNER_LC }}/${{ env.DOCKER_IMAGE_NAME }}:${{ needs.makeTagAndRelease.outputs.tag_name }},
            ghcr.io/${{ env.OWNER_LC }}/${{ env.DOCKER_IMAGE_NAME }}:latest
  

  deploy:
    runs-on: ubuntu-latest
    needs: [ makeTagAndRelease, buildImageAndPush ]
    env:
      IMAGE_REPOSITORY: catfe-backend # ÎèÑÏª§ Ïù¥ÎØ∏ÏßÄ Î™Ö
      CONTAINER_1_NAME: catfe_1 # Ïä¨Î°Ø 1
      CONTAINER_2_NAME: catfe_2 # Ïä¨Î°Ø 2
      CONTAINER_PORT: 8080 # Ïª®ÌÖåÏù¥ÎÑà ÎÇ¥Î∂Ä Ìè¨Ìä∏
      DOCKER_NETWORK: common # ÎèÑÏª§ ÎÑ§Ìä∏ÏõåÌÅ¨
      EC2_INSTANCE_TAG_NAME: team5-ec2-1

    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: get instance id
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name, Values=${{ env.EC2_INSTANCE_TAG_NAME }}" "Name=instance-state-name, Values=running" \
            --query "Reservations[].Instances[].InstanceId" --output text)
            [[ -n "${INSTANCE_ID}" && "${INSTANCE_ID}" != "None" ]] || { echo "No running instance found"; exit 1; }
            echo "INSTANCE_ID=${INSTANCE_ID}" >> "${GITHUB_ENV}"

      - name: AWS SSM Send-Command
        uses: peterkimzz/aws-ssm-send-command@master
        id: ssm
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          instance-ids: ${{ env.INSTANCE_ID }}
          working-directory: /
          comment: Deploy
          command: |
            
            set -Eeuo pipefail
            
            # 1. EC2 Ïù∏Ïä§ÌÑ¥Ïä§ ÏïÑÏù¥Îîî ÌôïÏù∏
            echo "INSTANCE_ID=${INSTANCE_ID}"
            
            # 3. Ïã§Ìñâ Î°úÍ∑∏(ÎùºÏù∏ ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ Î∂ÄÏ∞©)
            LOG="/tmp/ssm-$(date +%Y%m%d_%H%M%S).log"
            exec > >(awk '{ fflush(); print strftime("[%Y-%m-%d %H:%M:%S]"), $0 }' | tee -a "$LOG")
            exec 2> >(awk '{ fflush(); print strftime("[%Y-%m-%d %H:%M:%S]"), $0 }' | tee -a "$LOG" >&2)
            
            # 4. Î≥ÄÏàò Ï†ïÏùò
            source /etc/environment || true
            OWNER_LC="${{ github.repository_owner }}"
            OWNER_LC="${OWNER_LC,,}"
            IMAGE_TAG="${{ needs.makeTagAndRelease.outputs.tag_name }}"
            IMAGE_REPOSITORY="${{ env.IMAGE_REPOSITORY }}"
            IMAGE="ghcr.io/${OWNER_LC}/${IMAGE_REPOSITORY}:${IMAGE_TAG}"
            SLOT1="${{ env.CONTAINER_1_NAME }}"
            SLOT2="${{ env.CONTAINER_2_NAME }}"
            PORT_IN="${{ env.CONTAINER_PORT }}"
            NET="${{ env.DOCKER_NETWORK }}"
            
              # ÎèÑÏª§ Ïù¥ÎØ∏ÏßÄ pull Î∞õÍ∏∞
            echo "üîπ Use image: ${IMAGE}"
            docker pull "${IMAGE}"
            
            #5. NPM API ÌÜ†ÌÅ∞ Î∞úÍ∏â
            TOKEN=$(curl -s -X POST http://127.0.0.1:81/api/tokens \
              -H "Content-Type: application/json" \
              -d "{\"identity\": \"admin@npm.com\", \"secret\": \"${PASSWORD:-}\"}" | jq -r '.token')
              
              # Ï°∞ÌöåÌïú ÌÜ†ÌÅ∞Í≥º ÎèÑÎ©îÏù∏ Í≤ÄÏ¶ù
            [[ -n "${TOKEN}" && "${TOKEN}" != "null" ]] || { echo "NPM token issue failed"; exit 1; }
            [[ -n "${DOMAIN:-}" ]] || { echo "DOMAIN is empty"; exit 1; }
            
            # 6. ÎåÄÏÉÅ ÌîÑÎ°ùÏãú Ìò∏Ïä§Ìä∏ ID Ï°∞Ìöå(ÎèÑÎ©îÏù∏ Îß§Ïπ≠)
            PROXY_ID=$(curl -s -X GET "http://127.0.0.1:81/api/nginx/proxy-hosts" \
              -H "Authorization: Bearer ${TOKEN}" \
              | jq ".[] | select(.domain_names[]==\"${DOMAIN}\") | .id")
              
              # Ï°∞ÌöåÌïú ÌîÑÎ°ùÏãú Ìò∏Ïä§Ìä∏ ID Í≤ÄÏ¶ù
            [[ -n "${PROXY_ID}" && "${PROXY_ID}" != "null" ]] || { echo "Proxy host not found for ${DOMAIN}"; exit 1; }
            
            # ÌòÑÏû¨ ÌîÑÎ°ùÏãúÍ∞Ä Î∞îÎùºÎ≥¥Îäî ÏóÖÏä§Ìä∏Î¶º(Ïª®ÌÖåÏù¥ÎÑàÎ™Ö) Ï°∞Ìöå
            CURRENT_HOST=$(curl -s -X GET "http://127.0.0.1:81/api/nginx/proxy-hosts/${PROXY_ID}" \
              -H "Authorization: Bearer ${TOKEN}" \
              | jq -r '.forward_host')

            echo "üîé CURRENT_HOST: ${CURRENT_HOST:-none}"
            
            # 7. Ïó≠Ìï†(blue/green) ÌåêÏ†ï (blue -> ÌòÑÏû¨ Ïö¥ÏòÅ Ï§ëÏù∏ ÏÑúÎ≤Ñ, green -> ÍµêÏ≤¥Ìï† ÏÑúÎ≤Ñ)
            if [[ "${CURRENT_HOST:-}" == "${SLOT1}" ]]; then
              BLUE="${SLOT1}"
              GREEN="${SLOT2}"
            
            elif [[ "${CURRENT_HOST:-}" == "${SLOT2}" ]]; then
              BLUE="${SLOT2}"
              GREEN="${SLOT1}"
            
            # Ï¥àÍ∏∞ Î∞∞Ìè¨
            else
              BLUE="none"
              GREEN="${SLOT1}"
            
            # Ï°∞Í±¥Î¨∏ Ï¢ÖÎ£å
            fi
            echo "üé® role -> blue(now): ${BLUE}, green(next): ${GREEN}"
            
            # 8. Green Ïó≠Ìï† Ïª®ÌÖåÏù¥ÎÑà 
            docker rm -f "${GREEN}" > /dev/null 2>&1 || true
            echo "run new container -> ${GREEN}"
            docker run -d --name "${GREEN}" \
              --restart unless-stopped \
              --network "${NET}" \
              -e TZ=Asia/Seoul \
              "${IMAGE}"
            
            # 9. Ìó¨Ïä§Ï≤¥ÌÅ¨
            echo "‚è± health-check: ${GREEN}"
            TIMEOUT=120
            INTERVAL=3
            ELAPSED=0
            sleep 8 # Ï¥àÍ∏∞Î∂ÄÌåÖ Ïó¨Ïú†
            
            while (( ELAPSED < TIMEOUT )); do
              CODE=$(docker exec "${GREEN}" curl -s -o /dev/null -w "%{http_code}" "http://127.0.0.1:${PORT_IN}/actuator/health" || echo 000)
              [[ "${CODE}" == "200" ]] && { echo "‚úÖ ${GREEN} healthy"; break; }
              sleep "${INTERVAL}"
              ELAPSED=$((ELAPSED + INTERVAL))
            done
            [[ "${CODE:-000}" == "200" ]] || { echo "‚ùå ${GREEN} health failed"; docker logs --tail=200 "${GREEN}" || true; docker rm -f "${GREEN}" || true; exit 1; }
            
            # 10. ÏóÖÏä§Ìä∏Î¶º Ï†ÑÌôò
            NEW_CFG=$(jq -n --arg host "${GREEN}" --argjson port ${PORT_IN} '{forward_host:$host, forward_port:$port}')
            curl -s -X PUT "http://127.0.0.1:81/api/nginx/proxy-hosts/${PROXY_ID}" \
              -H "Authorization: Bearer ${TOKEN}" \
              -H "Content-Type: application/json" \
              -d "${NEW_CFG}" >/dev/null
            echo "üîÅ switch upstream ‚Üí ${GREEN}:${PORT_IN}"
            
            # 11. Ïù¥Ï†Ñ Blue Ï¢ÖÎ£å
            if [[ "${BLUE}" != "none" ]]; then
              docker stop "${BLUE}" >/dev/null 2>&1 || true
              docker rm "${BLUE}" >/dev/null 2>&1 || true
              echo "üßπ removed old blue: ${BLUE}"
            fi
            
            # 12. Ïù¥ÎØ∏ÏßÄ Ï†ïÎ¶¨
            {
              docker images --format '{{.Repository}}:{{.Tag}}' \
                | grep -F "ghcr.io/${OWNER_LC}/${IMAGE_REPOSITORY}:" \
                | grep -v -F ":${IMAGE_TAG}" \
                | grep -v -F ":latest" \
                | xargs -r docker rmi
            } || true

            echo "üèÅ Blue/Green switch complete. now blue = ${GREEN}"
            
            
            
            
            
            
            
            
